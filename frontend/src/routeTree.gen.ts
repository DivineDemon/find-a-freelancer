/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FreelancerIndexRouteImport } from './routes/freelancer/index'
import { Route as ClientHunterIndexRouteImport } from './routes/client-hunter/index'
import { Route as FreelancerChatHistoryIndexRouteImport } from './routes/freelancer/chat-history/index'
import { Route as ClientHunterProfileIndexRouteImport } from './routes/client-hunter/profile/index'
import { Route as ClientHunterChatHistoryIndexRouteImport } from './routes/client-hunter/chat-history/index'
import { Route as FreelancerChatClientHunterIdIndexRouteImport } from './routes/freelancer/chat/$clientHunterId/index'
import { Route as ClientHunterFreelancerUserIdIndexRouteImport } from './routes/client-hunter/freelancer/$userId/index'
import { Route as ClientHunterChatFreelancerIdIndexRouteImport } from './routes/client-hunter/chat/$freelancerId/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FreelancerIndexRoute = FreelancerIndexRouteImport.update({
  id: '/freelancer/',
  path: '/freelancer/',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientHunterIndexRoute = ClientHunterIndexRouteImport.update({
  id: '/client-hunter/',
  path: '/client-hunter/',
  getParentRoute: () => rootRouteImport,
} as any)
const FreelancerChatHistoryIndexRoute =
  FreelancerChatHistoryIndexRouteImport.update({
    id: '/freelancer/chat-history/',
    path: '/freelancer/chat-history/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ClientHunterProfileIndexRoute =
  ClientHunterProfileIndexRouteImport.update({
    id: '/client-hunter/profile/',
    path: '/client-hunter/profile/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ClientHunterChatHistoryIndexRoute =
  ClientHunterChatHistoryIndexRouteImport.update({
    id: '/client-hunter/chat-history/',
    path: '/client-hunter/chat-history/',
    getParentRoute: () => rootRouteImport,
  } as any)
const FreelancerChatClientHunterIdIndexRoute =
  FreelancerChatClientHunterIdIndexRouteImport.update({
    id: '/freelancer/chat/$clientHunterId/',
    path: '/freelancer/chat/$clientHunterId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ClientHunterFreelancerUserIdIndexRoute =
  ClientHunterFreelancerUserIdIndexRouteImport.update({
    id: '/client-hunter/freelancer/$userId/',
    path: '/client-hunter/freelancer/$userId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ClientHunterChatFreelancerIdIndexRoute =
  ClientHunterChatFreelancerIdIndexRouteImport.update({
    id: '/client-hunter/chat/$freelancerId/',
    path: '/client-hunter/chat/$freelancerId/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/client-hunter': typeof ClientHunterIndexRoute
  '/freelancer': typeof FreelancerIndexRoute
  '/client-hunter/chat-history': typeof ClientHunterChatHistoryIndexRoute
  '/client-hunter/profile': typeof ClientHunterProfileIndexRoute
  '/freelancer/chat-history': typeof FreelancerChatHistoryIndexRoute
  '/client-hunter/chat/$freelancerId': typeof ClientHunterChatFreelancerIdIndexRoute
  '/client-hunter/freelancer/$userId': typeof ClientHunterFreelancerUserIdIndexRoute
  '/freelancer/chat/$clientHunterId': typeof FreelancerChatClientHunterIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/client-hunter': typeof ClientHunterIndexRoute
  '/freelancer': typeof FreelancerIndexRoute
  '/client-hunter/chat-history': typeof ClientHunterChatHistoryIndexRoute
  '/client-hunter/profile': typeof ClientHunterProfileIndexRoute
  '/freelancer/chat-history': typeof FreelancerChatHistoryIndexRoute
  '/client-hunter/chat/$freelancerId': typeof ClientHunterChatFreelancerIdIndexRoute
  '/client-hunter/freelancer/$userId': typeof ClientHunterFreelancerUserIdIndexRoute
  '/freelancer/chat/$clientHunterId': typeof FreelancerChatClientHunterIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/client-hunter/': typeof ClientHunterIndexRoute
  '/freelancer/': typeof FreelancerIndexRoute
  '/client-hunter/chat-history/': typeof ClientHunterChatHistoryIndexRoute
  '/client-hunter/profile/': typeof ClientHunterProfileIndexRoute
  '/freelancer/chat-history/': typeof FreelancerChatHistoryIndexRoute
  '/client-hunter/chat/$freelancerId/': typeof ClientHunterChatFreelancerIdIndexRoute
  '/client-hunter/freelancer/$userId/': typeof ClientHunterFreelancerUserIdIndexRoute
  '/freelancer/chat/$clientHunterId/': typeof FreelancerChatClientHunterIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/client-hunter'
    | '/freelancer'
    | '/client-hunter/chat-history'
    | '/client-hunter/profile'
    | '/freelancer/chat-history'
    | '/client-hunter/chat/$freelancerId'
    | '/client-hunter/freelancer/$userId'
    | '/freelancer/chat/$clientHunterId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/client-hunter'
    | '/freelancer'
    | '/client-hunter/chat-history'
    | '/client-hunter/profile'
    | '/freelancer/chat-history'
    | '/client-hunter/chat/$freelancerId'
    | '/client-hunter/freelancer/$userId'
    | '/freelancer/chat/$clientHunterId'
  id:
    | '__root__'
    | '/'
    | '/client-hunter/'
    | '/freelancer/'
    | '/client-hunter/chat-history/'
    | '/client-hunter/profile/'
    | '/freelancer/chat-history/'
    | '/client-hunter/chat/$freelancerId/'
    | '/client-hunter/freelancer/$userId/'
    | '/freelancer/chat/$clientHunterId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClientHunterIndexRoute: typeof ClientHunterIndexRoute
  FreelancerIndexRoute: typeof FreelancerIndexRoute
  ClientHunterChatHistoryIndexRoute: typeof ClientHunterChatHistoryIndexRoute
  ClientHunterProfileIndexRoute: typeof ClientHunterProfileIndexRoute
  FreelancerChatHistoryIndexRoute: typeof FreelancerChatHistoryIndexRoute
  ClientHunterChatFreelancerIdIndexRoute: typeof ClientHunterChatFreelancerIdIndexRoute
  ClientHunterFreelancerUserIdIndexRoute: typeof ClientHunterFreelancerUserIdIndexRoute
  FreelancerChatClientHunterIdIndexRoute: typeof FreelancerChatClientHunterIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/freelancer/': {
      id: '/freelancer/'
      path: '/freelancer'
      fullPath: '/freelancer'
      preLoaderRoute: typeof FreelancerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client-hunter/': {
      id: '/client-hunter/'
      path: '/client-hunter'
      fullPath: '/client-hunter'
      preLoaderRoute: typeof ClientHunterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/freelancer/chat-history/': {
      id: '/freelancer/chat-history/'
      path: '/freelancer/chat-history'
      fullPath: '/freelancer/chat-history'
      preLoaderRoute: typeof FreelancerChatHistoryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client-hunter/profile/': {
      id: '/client-hunter/profile/'
      path: '/client-hunter/profile'
      fullPath: '/client-hunter/profile'
      preLoaderRoute: typeof ClientHunterProfileIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client-hunter/chat-history/': {
      id: '/client-hunter/chat-history/'
      path: '/client-hunter/chat-history'
      fullPath: '/client-hunter/chat-history'
      preLoaderRoute: typeof ClientHunterChatHistoryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/freelancer/chat/$clientHunterId/': {
      id: '/freelancer/chat/$clientHunterId/'
      path: '/freelancer/chat/$clientHunterId'
      fullPath: '/freelancer/chat/$clientHunterId'
      preLoaderRoute: typeof FreelancerChatClientHunterIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client-hunter/freelancer/$userId/': {
      id: '/client-hunter/freelancer/$userId/'
      path: '/client-hunter/freelancer/$userId'
      fullPath: '/client-hunter/freelancer/$userId'
      preLoaderRoute: typeof ClientHunterFreelancerUserIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/client-hunter/chat/$freelancerId/': {
      id: '/client-hunter/chat/$freelancerId/'
      path: '/client-hunter/chat/$freelancerId'
      fullPath: '/client-hunter/chat/$freelancerId'
      preLoaderRoute: typeof ClientHunterChatFreelancerIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClientHunterIndexRoute: ClientHunterIndexRoute,
  FreelancerIndexRoute: FreelancerIndexRoute,
  ClientHunterChatHistoryIndexRoute: ClientHunterChatHistoryIndexRoute,
  ClientHunterProfileIndexRoute: ClientHunterProfileIndexRoute,
  FreelancerChatHistoryIndexRoute: FreelancerChatHistoryIndexRoute,
  ClientHunterChatFreelancerIdIndexRoute:
    ClientHunterChatFreelancerIdIndexRoute,
  ClientHunterFreelancerUserIdIndexRoute:
    ClientHunterFreelancerUserIdIndexRoute,
  FreelancerChatClientHunterIdIndexRoute:
    FreelancerChatClientHunterIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
