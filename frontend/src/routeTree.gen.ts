/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardProfileRouteImport } from './routes/dashboard/profile'
import { Route as DashboardChatHistoryRouteImport } from './routes/dashboard/chat-history'
import { Route as ChatFreelancerIdIndexRouteImport } from './routes/chat/$freelancerId/index'
import { Route as DashboardFreelancerProfileUserIdIndexRouteImport } from './routes/dashboard/freelancer-profile/$userId/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardProfileRoute = DashboardProfileRouteImport.update({
  id: '/dashboard/profile',
  path: '/dashboard/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardChatHistoryRoute = DashboardChatHistoryRouteImport.update({
  id: '/dashboard/chat-history',
  path: '/dashboard/chat-history',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatFreelancerIdIndexRoute = ChatFreelancerIdIndexRouteImport.update({
  id: '/chat/$freelancerId/',
  path: '/chat/$freelancerId/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardFreelancerProfileUserIdIndexRoute =
  DashboardFreelancerProfileUserIdIndexRouteImport.update({
    id: '/dashboard/freelancer-profile/$userId/',
    path: '/dashboard/freelancer-profile/$userId/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard/chat-history': typeof DashboardChatHistoryRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard': typeof DashboardIndexRoute
  '/chat/$freelancerId': typeof ChatFreelancerIdIndexRoute
  '/dashboard/freelancer-profile/$userId': typeof DashboardFreelancerProfileUserIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/chat-history': typeof DashboardChatHistoryRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard': typeof DashboardIndexRoute
  '/chat/$freelancerId': typeof ChatFreelancerIdIndexRoute
  '/dashboard/freelancer-profile/$userId': typeof DashboardFreelancerProfileUserIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard/chat-history': typeof DashboardChatHistoryRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/chat/$freelancerId/': typeof ChatFreelancerIdIndexRoute
  '/dashboard/freelancer-profile/$userId/': typeof DashboardFreelancerProfileUserIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard/chat-history'
    | '/dashboard/profile'
    | '/dashboard'
    | '/chat/$freelancerId'
    | '/dashboard/freelancer-profile/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/chat-history'
    | '/dashboard/profile'
    | '/dashboard'
    | '/chat/$freelancerId'
    | '/dashboard/freelancer-profile/$userId'
  id:
    | '__root__'
    | '/'
    | '/dashboard/chat-history'
    | '/dashboard/profile'
    | '/dashboard/'
    | '/chat/$freelancerId/'
    | '/dashboard/freelancer-profile/$userId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardChatHistoryRoute: typeof DashboardChatHistoryRoute
  DashboardProfileRoute: typeof DashboardProfileRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  ChatFreelancerIdIndexRoute: typeof ChatFreelancerIdIndexRoute
  DashboardFreelancerProfileUserIdIndexRoute: typeof DashboardFreelancerProfileUserIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/profile': {
      id: '/dashboard/profile'
      path: '/dashboard/profile'
      fullPath: '/dashboard/profile'
      preLoaderRoute: typeof DashboardProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/chat-history': {
      id: '/dashboard/chat-history'
      path: '/dashboard/chat-history'
      fullPath: '/dashboard/chat-history'
      preLoaderRoute: typeof DashboardChatHistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/$freelancerId/': {
      id: '/chat/$freelancerId/'
      path: '/chat/$freelancerId'
      fullPath: '/chat/$freelancerId'
      preLoaderRoute: typeof ChatFreelancerIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/freelancer-profile/$userId/': {
      id: '/dashboard/freelancer-profile/$userId/'
      path: '/dashboard/freelancer-profile/$userId'
      fullPath: '/dashboard/freelancer-profile/$userId'
      preLoaderRoute: typeof DashboardFreelancerProfileUserIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardChatHistoryRoute: DashboardChatHistoryRoute,
  DashboardProfileRoute: DashboardProfileRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  ChatFreelancerIdIndexRoute: ChatFreelancerIdIndexRoute,
  DashboardFreelancerProfileUserIdIndexRoute:
    DashboardFreelancerProfileUserIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
