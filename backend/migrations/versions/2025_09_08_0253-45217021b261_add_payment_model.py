"""add_payment_model

Revision ID: 45217021b261
Revises: add_has_paid_field
Create Date: 2025-09-08 02:53:15.523489

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '45217021b261'
down_revision: Union[str, None] = 'add_has_paid_field'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First, clear existing data to avoid NOT NULL constraint issues
    op.execute("DELETE FROM payments")
    
    # Add new columns
    op.add_column(
        'payments', 
        sa.Column('stripe_payment_intent_id', sa.String(), nullable=False)
    )
    op.add_column(
        'payments', 
        sa.Column('stripe_customer_id', sa.String(), nullable=True)
    )
    op.add_column(
        'payments', 
        sa.Column('payment_method', sa.String(), nullable=True)
    )
    op.add_column(
        'payments', 
        sa.Column('payment_metadata', sa.Text(), nullable=True)
    )
    op.add_column(
        'payments', 
        sa.Column('failed_at', sa.DateTime(), nullable=True)
    )
    op.add_column(
        'payments', 
        sa.Column('canceled_at', sa.DateTime(), nullable=True)
    )
    op.add_column(
        'payments', 
        sa.Column('refunded', sa.Boolean(), nullable=False, 
                 server_default='false')
    )
    op.add_column(
        'payments', 
        sa.Column('refunded_at', sa.DateTime(), nullable=True)
    )
    op.add_column(
        'payments', 
        sa.Column('refund_amount', sa.Integer(), nullable=True)
    )
    op.alter_column('payments', 'amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column(
        'payments', 'status',
        existing_type=postgresql.ENUM(
            'PENDING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 
            name='paymentstatus'
        ),
        type_=sa.String(),
        existing_nullable=False
    )
    op.drop_constraint('payments_paypal_order_id_key', 'payments', type_='unique')
    op.drop_constraint('payments_paypal_payment_id_key', 'payments', type_='unique')
    op.drop_constraint('payments_paypal_transaction_id_key', 'payments', type_='unique')
    op.create_index(
        op.f('ix_payments_stripe_customer_id'), 
        'payments', 
        ['stripe_customer_id'], 
        unique=False
    )
    op.create_index(
        op.f('ix_payments_stripe_payment_intent_id'), 
        'payments', 
        ['stripe_payment_intent_id'], 
        unique=True
    )
    op.create_index(
        op.f('ix_payments_user_id'), 
        'payments', 
        ['user_id'], 
        unique=False
    )
    op.drop_constraint('payments_user_id_fkey', 'payments', type_='foreignkey')
    op.drop_column('payments', 'paypal_transaction_id')
    op.drop_column('payments', 'payment_type')
    op.drop_column('payments', 'paypal_payment_id')
    op.drop_column('payments', 'paypal_order_id')
    op.drop_column('payments', 'expires_at')
    op.alter_column('users', 'has_paid',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'has_paid',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.add_column(
        'payments', 
        sa.Column('expires_at', postgresql.TIMESTAMP(), 
                 autoincrement=False, nullable=True)
    )
    op.add_column(
        'payments', 
        sa.Column('paypal_order_id', sa.VARCHAR(), 
                 autoincrement=False, nullable=True)
    )
    op.add_column(
        'payments', 
        sa.Column('paypal_payment_id', sa.VARCHAR(), 
                 autoincrement=False, nullable=True)
    )
    op.add_column(
        'payments', 
        sa.Column('payment_type', postgresql.ENUM(
            'ONE_TIME_FEE', 'SUBSCRIPTION', 'PROJECT_PAYMENT', 
            name='paymenttype'
        ), autoincrement=False, nullable=False)
    )
    op.add_column(
        'payments', 
        sa.Column('paypal_transaction_id', sa.VARCHAR(), 
                 autoincrement=False, nullable=True)
    )
    op.create_foreign_key(
        'payments_user_id_fkey', 
        'payments', 
        'users', 
        ['user_id'], 
        ['id']
    )
    op.drop_index(op.f('ix_payments_user_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_stripe_payment_intent_id'), table_name='payments')
    op.drop_index(op.f('ix_payments_stripe_customer_id'), table_name='payments')
    op.create_unique_constraint(
        'payments_paypal_transaction_id_key', 
        'payments', 
        ['paypal_transaction_id']
    )
    op.create_unique_constraint(
        'payments_paypal_payment_id_key', 
        'payments', 
        ['paypal_payment_id']
    )
    op.create_unique_constraint(
        'payments_paypal_order_id_key', 
        'payments', 
        ['paypal_order_id']
    )
    op.alter_column(
        'payments', 'status',
        existing_type=sa.String(),
        type_=postgresql.ENUM(
            'PENDING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED', 
            name='paymentstatus'
        ),
        existing_nullable=False
    )
    op.alter_column('payments', 'amount',
               existing_type=sa.Integer(),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=False)
    op.drop_column('payments', 'refund_amount')
    op.drop_column('payments', 'refunded_at')
    op.drop_column('payments', 'refunded')
    op.drop_column('payments', 'canceled_at')
    op.drop_column('payments', 'failed_at')
    op.drop_column('payments', 'payment_metadata')
    op.drop_column('payments', 'payment_method')
    op.drop_column('payments', 'stripe_customer_id')
    op.drop_column('payments', 'stripe_payment_intent_id')
    # ### end Alembic commands ###
